@page "/articulos/formArticulo"
@page "/articulos/editar/{ArticuloId:int}"
@using CasaRositaFact.Components.Pages.Categorias
@using CasaRositaFact.Components.Pages.Proveedores
@using CasaRositaFact.Components.Pages.Rubros
@using CasaRositaFact.Components.Pages.Unidades_Medidas
@using Microsoft.AspNetCore.Components.Forms
@using Services
@using Models
@using static CasaRositaFact.Models.Articulo
@inject ArticuloService ArticuloService
@inject CategoriaService CategoriaService
@inject ProveedorService ProveedorService
@inject PrecioArticuloService PrecioArticuloService
@inject UnidadMedidaService UnidadMedidaService
@inject RubroService RubroService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<h3 class="mb-2 text-info fw-bold border-bottom pb-2">@(ArticuloId == null ? "Nuevo Artículo" : "Editar Artículo")</h3>


<EditForm Model="articulo" OnValidSubmit="SaveArticulo">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h3 class="mb-3 text-secondary fw-bold border-bottom pb-2">Datos generales</h3>
    <div class="row mb-2 align-items-end">
        <!-- align-items-end para alinear verticalmente -->
        <!-- Nombre -->
        <div class="col-md-4">
            <label for="Nombre" class="form-label">Nombre</label>
            <InputText id="Nombre" class="form-control" @bind-Value="articulo.Nombre" />
        </div>

        <!-- Código -->
        <div class="col-md-4">
            <label for="CodigoProducto" class="form-label">Código</label>
            <InputText id="CodigoProducto" class="form-control" @bind-Value="articulo.CodigoProducto" />
        </div>

        <!-- Checkbox "Lleva Stock" (alineado con los inputs) -->
        <div class="col-md-2 d-flex align-items-center">
            <!-- d-flex para alinear el checkbox -->
            <div class="form-check form-switch mt-3">
                <label class="form-check-label" for="LlevarStock">Lleva Stock</label>
                <InputCheckbox id="LlevarStock"
                               class="form-check-input"
                               @bind-Value="LlevarStock" />

            </div>
        </div>

    </div>
    @if (articulo.LlevarStock)
    {
        <div class="row mb-2 align-items-end">
            <div class="col-md-2">
                <label for="StockActual" class="form-label">Stock Actual</label>
                <InputNumber id="StockActual" class="form-control" @bind-Value="articulo.StockActual" />
            </div>
            <div class="col-md-2">
                <label for="CantidadMinima" class="form-label">Stock Mínimo</label>
                <InputNumber id="CantidadMinima" class="form-control" @bind-Value="articulo.CantidadMinima" />
            </div>
        </div>
    }

    <div class="mb-4">
        <label for="Descripcion" class="form-label">Descripción</label>
        <InputTextArea id="Descripcion" class="form-control" rows="3" @bind-Value="articulo.Descripcion" />
    </div>

    <h3 class="mb-3 text-secondary fw-bold border-bottom pb-2">Precios</h3>

    <div class="row mb-2">
        <div class="col-md-6">
            <label for="PrecioCosto" class="form-label">Precio de Costo</label>
            <input type="number" class="form-control"
                   value="@_precioCostoTexto"
                   @oninput="OnCostoChanged"
                   step="any" />
        </div>

        <div class="col-md-6">
            <label for="PorcentajeGanancia" class="form-label">Porcentaje de Ganancia</label>
            <input type="number" class="form-control"
                   value="@_porcentajeGananciaTexto"
                   @oninput="OnGananciaChanged"
                   step="any" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <label for="PrecioVenta" class="form-label">Total con IVA</label>
            <InputNumber id="PrecioVenta" class="form-control"
                         @bind-Value="precioArticulo.PrecioVentaConIva" readonly />
        </div>

        <div class="col-md-6">
            <label for="FechaUltimaActualizacion" class="form-label">Última Actualización</label>
            <InputDate id="FechaUltimaActualizacion" class="form-control" @bind-Value="precioArticulo.FechaUltimaActualizacion" disabled />
        </div>
    </div>

    <h3 class="mb-3 text-secondary fw-bold border-bottom pb-2">Clasificación</h3>

    <div class="row mb-2">
        <div class="col-md-6">
            <label class="form-label">Seleccione Categoría</label>
            <CategoriaSelect Categorias="@categorias" @bind-SelectedId="articulo.IdCategoria" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Seleccione Rubro</label>
            <RubroSelect Rubros="@rubros" @bind-SelectedId="articulo.IdRubro" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <label class="form-label">Seleccione Proveedor</label>
            <ProveedorSelect Proveedores="@proveedores" @bind-SelectedId="articulo.IdProveedor" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Seleccione Unidad de Medida</label>
            <UnidadMedidaSelect UnidadesMedidas="@unidadesMedida" @bind-SelectedId="articulo.IdUnidadMedida" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Guardar</button>
    <button type="button" class="btn btn-secondary" @onclick="NavigateToArticulos">Cancelar</button>
</EditForm>

@code {
    [Parameter] public int? ArticuloId { get; set; }
    private Articulo articulo = new Articulo()
        {
            Nombre = ""
        };

    private PrecioArticulo precioArticulo = new PrecioArticulo()
        {
            PrecioCosto = 0,
            PrecioVentaConIva = 0,
            PorcentajeGanancia = 30.0m,
            PrecioVentaSinIva = 0
        };

    private List<Categoria> categorias = new();
    private List<Rubro> rubros = new();
    private List<UnidadMedida> unidadesMedida = new();
    private List<Proveedor> proveedores = new();

    protected override async Task OnInitializedAsync()
    {
        if (ArticuloId.HasValue)
        {
            articulo = await ArticuloService.GetByIdAsync(ArticuloId.Value);
            precioArticulo = await PrecioArticuloService.GetLastPrecioByArticuloIdAsync(articulo.IdArticulo) ??
                new PrecioArticulo() { PrecioCosto = 0, PrecioVentaConIva = 0, PrecioVentaSinIva = 0 };

        }
        else
        {
            precioArticulo.FechaUltimaActualizacion = DateTime.Now;

        }

        _porcentajeGananciaTexto = precioArticulo.PorcentajeGanancia.ToString("0.##");
        _precioCostoTexto = precioArticulo.PrecioCosto.ToString("0.##");

        var proveedoresDTO = await ProveedorService.GetAllProveedoresAsync();
        proveedores = proveedoresDTO
            .Where(p => p != null)
            .Select(p => p!) // el ! le dice al compilador que p no es null (porque ya filtraste)
            .ToList();

        var categoriaDTO = await CategoriaService.GetAllCategoriasAsync();
        categorias = categoriaDTO
            .Where(c => c != null)
            .Select(c => c!).ToList();

        var rubroDTO = await RubroService.GetAllRubrosAsync();
        rubros = rubroDTO
            .Where(c => c != null)
            .Select(c => c!).ToList();


        var unidadesMedidaDTO = await UnidadMedidaService.GetAllUnidadMedidaAsync();
        unidadesMedida = unidadesMedidaDTO
            .Where(u => u != null)
            .Select(u => u!)
            .ToList();

        LlevarStock = articulo.LlevarStock;
    }

    private async Task SaveArticulo()
    {

        var nombre = articulo.Nombre.Trim().ToLower();

        var articulosExistentes = await ArticuloService.GetAllAsync();
        var yaExiste = articulosExistentes.Any(c =>
            c.Nombre.Trim().ToLower() == nombre);

        if (yaExiste && articulo.IdArticulo == 0)
        {
            // Mostrar un mensaje de error o advertencia al usuario
            await JS.InvokeVoidAsync("mostrarModalArticuloExiste");
            return;
        }

        // Calcular el precio de venta si no se ha proporcionado
        if (precioArticulo.PrecioVentaConIva == 0 && precioArticulo.PrecioCosto > 0 && precioArticulo.PorcentajeGanancia > 0)
        {
            precioArticulo.PrecioVentaConIva = precioArticulo.PrecioCosto * (1 + (precioArticulo.PorcentajeGanancia / 100));
        }

        if (articulo.IdArticulo == 0)
        {
            await ArticuloService.AddAsync(articulo);

            // Asignar el ID del artículo al precio
            precioArticulo.IdArticulo = articulo.IdArticulo;

            // Guardar el precio del artículo
            await PrecioArticuloService.AddPrecioAsync(precioArticulo);
        }
        else
        {
            articulo.FechaUltimoIngreso = DateTime.Now;
            await ArticuloService.UpdateAsync(articulo);


            // Verificar si ya existe un precio para este artículo
            var precioExistente = await PrecioArticuloService.GetLastPrecioByArticuloIdAsync(articulo.IdArticulo);

            if (precioExistente != null)
            {
                // Actualizar el precio existente
                precioArticulo.IdPrecioArticulo = precioExistente.IdPrecioArticulo;
                await PrecioArticuloService.UpdatePrecioAsync(precioArticulo);
            }
            else
            {
                // Crear un nuevo precio
                precioArticulo.IdArticulo = articulo.IdArticulo;
                await PrecioArticuloService.AddPrecioAsync(precioArticulo);
            }
        }
        NavigationManager.NavigateTo("/articulos");
    }

    private string? _precioCostoTexto;
    private string? _porcentajeGananciaTexto;

    private void OnCostoChanged(ChangeEventArgs e)
    {
        _precioCostoTexto = e.Value?.ToString() ?? "0";

        if (decimal.TryParse(_precioCostoTexto, out var costo))
        {
            precioArticulo.PrecioCosto = costo;
            CalcularPrecioVenta();
        }
    }

    private void OnGananciaChanged(ChangeEventArgs e)
    {
        _porcentajeGananciaTexto = e.Value?.ToString() ?? "0";

        if (decimal.TryParse(_porcentajeGananciaTexto, out var ganancia))
        {
            precioArticulo.PorcentajeGanancia = ganancia;
            CalcularPrecioVenta();
        }
    }

    private void CalcularPrecioVenta()
    {
        try
        {
            if (precioArticulo.PrecioCosto <= 0 || precioArticulo.PorcentajeGanancia <= 0)
            {
                precioArticulo.PrecioVentaConIva = 0;
                return;
            }
            const decimal IVA = 0.21m;

            decimal precioBase = precioArticulo.PrecioCosto * (1 + (precioArticulo.PorcentajeGanancia / 100));
            decimal iva = Math.Round(precioBase * IVA, 2);
            precioArticulo.PrecioVentaConIva = Math.Round(precioBase + iva, 2);

        }
        catch
        {
            precioArticulo.PrecioVentaConIva = 0;
        }
    }

    private void NavigateToArticulos()
    {
        NavigationManager.NavigateTo("/articulos");
    }

    private bool _llevarStock;
    public bool LlevarStock
    {
        get => _llevarStock;
        set
        {
            _llevarStock = value;
            articulo.LlevarStock = value;
   
            if (!value)
            {
                articulo.StockActual = 0;
                articulo.CantidadMinima = 0;
            }
        }
    }
}

<div class="modal fade" id="articuloExisteModal" tabindex="-1" aria-labelledby="articuloExisteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="articuloExisteModalLabel">Atención</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                Ya existe un artículo con ese nombre.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Aceptar</button>
            </div>
        </div>
    </div>
</div>
<script>
    function mostrarModalArticuloExiste() {
        var myModal = new bootstrap.Modal(document.getElementById('articuloExisteModal'));
        myModal.show();
    }
</script>