@page "/articulos/formArticulo"
@page "/articulos/editar/{ArticuloId:int}"
@using CasaRositaFact.Components.Pages.Categorias
@using CasaRositaFact.Components.Pages.Proveedores
@using CasaRositaFact.Components.Pages.Rubros
@using CasaRositaFact.Components.Pages.Unidades_Medidas
@using Microsoft.AspNetCore.Components.Forms
@using Services
@using Models
@using static CasaRositaFact.Models.Articulo
@inject ArticuloService ArticuloService
@inject CategoriaService CategoriaService
@inject ProveedorService ProveedorService
@inject PrecioArticuloService PrecioArticuloService
@inject UnidadMedidaService UnidadMedidaService
@inject RubroService RubroService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<h3 class="mb-2 text-info fw-bold border-bottom pb-2">@(ArticuloId == null ? "Nuevo Artículo" : "Editar Artículo")</h3>


<EditForm Model="articulo" OnValidSubmit="SaveArticulo">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h3 class="mb-3 text-secondary fw-bold border-bottom pb-2">Datos generales</h3>
    <div class="row mb-2">
        <div class="col-md-6">
            <label for="Nombre" class="form-label">Nombre</label>
            <InputText id="Nombre" class="form-control" @bind-Value="articulo.Nombre" />
        </div>

        <div class="col-md-6">
            <label for="CodigoProducto" class="form-label">Código del Artículo</label>
            <InputText id="CodigoProducto" class="form-control" @bind-Value="articulo.CodigoProducto" />
        </div>
    </div>

    <div class="mb-4">
        <label for="Descripcion" class="form-label">Descripción</label>
        <InputTextArea id="Descripcion" class="form-control" rows="3" @bind-Value="articulo.Descripcion" />
    </div>

    <h3 class="mb-3 text-secondary fw-bold border-bottom pb-2">Precios</h3>

    <div class="row mb-2">
        <div class="col-md-6">
            <label for="PrecioCosto" class="form-label">Precio de Costo</label>
            <InputNumber id="PrecioCosto" class="form-control" @bind-Value="precioArticulo.PrecioCosto" />
        </div>

        <div class="col-md-6">
            <label for="PorcentajeGanancia" class="form-label">Porcentaje de Ganancia</label>
            <InputNumber id="PorcentajeGanancia" class="form-control" @bind-Value="precioArticulo.PorcentajeGanancia" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <label for="PrecioVenta" class="form-label">Precio de Venta</label>
            <InputNumber id="PrecioVenta" class="form-control" @bind-Value="precioArticulo.PrecioVenta" />
        </div>

        <div class="col-md-6">
            <label for="FechaUltimaActualizacion" class="form-label">Última Actualización</label>
            <InputDate id="FechaUltimaActualizacion" class="form-control" @bind-Value="precioArticulo.FechaUltimaActualizacion" disabled />
        </div>
    </div>

    <h3 class="mb-3 text-secondary fw-bold border-bottom pb-2">Clasificación</h3>

    <div class="row mb-2">
        <div class="col-md-6">
            <label class="form-label">Seleccione Categoría</label>
            <CategoriaSelect Categorias="@categorias" @bind-SelectedId="articulo.IdCategoria" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Seleccione Rubro</label>
            <RubroSelect Rubros="@rubros" @bind-SelectedId="articulo.IdRubro" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <label class="form-label">Seleccione Proveedor</label>
            <ProveedorSelect Proveedores="@proveedores" @bind-SelectedId="articulo.IdProveedor" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Seleccione Unidad de Medida</label>
            <UnidadMedidaSelect UnidadesMedidas="@unidadesMedida" @bind-SelectId="articulo.IdUnidadMedida" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Guardar</button>
    <button type="button" class="btn btn-secondary" @onclick="NavigateToArticulos">Cancelar</button>
</EditForm>

@code {
    [Parameter] public int? ArticuloId { get; set; }
    private Articulo articulo = new Articulo()
        {
            Nombre = ""
        };

    private PrecioArticulo precioArticulo = new PrecioArticulo()
        {
            PrecioCosto = 0,
            PrecioVenta = 0
        };

    private List<Categoria> categorias = new();
    private List<Rubro> rubros = new();
    private List<UnidadMedida> unidadesMedida = new();
    private List<Proveedor> proveedores = new();

    protected override async Task OnInitializedAsync()
    {
        if (ArticuloId.HasValue)
        {
            articulo = await ArticuloService.GetByIdAsync(ArticuloId.Value);
            precioArticulo = await PrecioArticuloService.GetLastPrecioByArticuloIdAsync(articulo.IdArticulo) ??
                new PrecioArticulo() { PrecioCosto = 0, PrecioVenta = 0 };

        }
        else
        {
            precioArticulo.FechaUltimaActualizacion = DateTime.Now;

        }

        var proveedoresDTO = await ProveedorService.GetAllProveedoresAsync();
        proveedores = proveedoresDTO
            .Where(p => p != null)
            .Select(p => p!) // el ! le dice al compilador que p no es null (porque ya filtraste)
            .ToList();

        var categoriaDTO = await CategoriaService.GetAllCategoriasAsync();
        categorias = categoriaDTO
            .Where(c => c != null)
            .Select(c => c!)
            .ToList();

        var rubroDTO = await RubroService.GetAllRubrosAsync();
        rubros = rubroDTO
            .Where(r => r != null)
            .Select(r => r!)
            .ToList();

        var unidadesMedidaDTO = await UnidadMedidaService.GetAllUnidadMedidaAsync();
        unidadesMedida = unidadesMedidaDTO
            .Where(u => u != null)
            .Select(u => u!)
            .ToList();

    }

    private async Task SaveArticulo()
    {

        var nombre = articulo.Nombre.Trim().ToLower();

        var articulosExistentes = await ArticuloService.GetAllAsync();
        var yaExiste = articulosExistentes.Any(c =>
            c.Nombre.Trim().ToLower() == nombre);

        if (yaExiste && articulo.IdArticulo == 0)
        {
            // Mostrar un mensaje de error o advertencia al usuario
            await JS.InvokeVoidAsync("mostrarModalArticuloExiste");
            return;
        }

        if (articulo.IdArticulo == 0)
        {
            await ArticuloService.AddAsync(articulo);
        }
        else
        {
            await ArticuloService.UpdateAsync(articulo);
        }
        NavigationManager.NavigateTo("/articulos");
    }

    private void NavigateToArticulos()
    {
        NavigationManager.NavigateTo("/articulos");
    }
}

<div class="modal fade" id="articuloExisteModal" tabindex="-1" aria-labelledby="articuloExisteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="articuloExisteModalLabel">Atención</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                Ya existe un artículo con ese nombre.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Aceptar</button>
            </div>
        </div>
    </div>
</div>
<script>
    function mostrarModalArticuloExiste() {
        var myModal = new bootstrap.Modal(document.getElementById('articuloExisteModal'));
        myModal.show();
    }
</script>