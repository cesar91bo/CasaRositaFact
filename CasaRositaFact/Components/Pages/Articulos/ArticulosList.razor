@page "/articulos"
@using Services
@using Models
@inject ArticuloService ArticuloService
@inject NavigationManager NavigationManager

<h3>Lista de Artículos</h3>

<button type="button" @onclick="CreateNewArticulo" class="btn btn-primary mb-3">Nuevo Artículo</button>

<input type="text" @bind="filtro" @bind:event="oninput" class="form-control mb-3" placeholder="Buscar por nombre" />

<table class="table">
    <thead class="table-light">
        <tr>
            <th class="w-25">Nombre</th> <!-- 25% de ancho -->
            <th class="w-15 text-center">Categoría</th> <!-- 15% -->
            <th class="w-10 text-center">Rubro</th> <!-- 10% -->
            <th class="w-10 text-center">Precio Costo</th> <!-- Alineado a la derecha -->
            <th class="w-10 text-center">Total con IVA</th>
            <th class="w-10">Actualización</th>
            <th class="w-20 text-center">Acciones</th> <!-- 20% y centrado -->
        </tr>
    </thead>
    <tbody>
        @foreach (var articulo in articulosFiltrados)
        {
            <tr>
                <td class="text-truncate" style="max-width: 200px;" title="@articulo.Nombre">
                    @articulo.Nombre
                </td>
                <td class="text-center">@articulo.Categoria?.Nombre</td>
                <td class="text-center">@articulo.Rubro?.Nombre</td>
                <td class="text-center">@(precioCosto != 0 ? precioCosto.ToString("C") : "Sin precio")</td>
                <td class="text-center">@(articulo.PrecioActual?.ToString("C") ?? "Sin precio")</td>
                <td>@(fechaUActual?.ToString("dd/MM/yyyy") ?? "Sin fecha")</td>
                <td class="text-center">
                    <div class="btn-group" role="group">
                        <a class="btn btn-secondary" href="@($"/articulos/editar/{articulo.IdArticulo}")"> <i class="bi bi-pencil"></i> Editar</a> |
                        <button class="btn btn-danger" @onclick="() => DeleteArticulo(articulo.IdArticulo)"> <i class="bi bi-trash"></i> Eliminar</button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Articulo> articulos = new List<Articulo>();
    private List<Articulo> articulosFiltrados = new List<Articulo>();
    private decimal precioCosto = 0;
    private DateTime? fechaUActual;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            articulos = (await ArticuloService.GetAllAsync()).ToList();
            SetPrecioActual(articulos);
            articulosFiltrados = articulos;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al inicializar el componente: {ex.Message}");
        }
    }

    private void CreateNewArticulo()
    {
        NavigationManager.NavigateTo("/articulos/formArticulo");
    }
    private async Task DeleteArticulo(int id)
    {
        await ArticuloService.DeleteAsync(id);
        articulosFiltrados = (await ArticuloService.GetAllAsync()).ToList();

    }
    private string filtro
    {
        get => _filtro;
        set
        {
            _filtro = value;
            FiltrarArticulos();
        }
    }
    private string _filtro = "";

    private void FiltrarArticulos()
    {
        if (_filtro.Length >= 2)
        {
            articulosFiltrados = articulos
                .Where(a => $"{a.Nombre}".Contains(_filtro, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else if (string.IsNullOrWhiteSpace(_filtro))
        {
            articulosFiltrados = articulos.ToList(); // vuelve a cargar toda la grilla
        }
    }

    private void SetPrecioActual(List<Articulo> listaArticulos)
    {
        foreach (var articulo in listaArticulos)
        {
            if (articulo.PreciosArticulos == null || !articulo.PreciosArticulos.Any())
            {
                articulo.PrecioActual = null;
                continue;
            }

            // Obtener el precio más reciente según la lógica de fechas
            var precioActual = articulo.PreciosArticulos
                .Where(p => p.FechaIncio <= DateTime.Now) // Precios vigentes
                .OrderByDescending(p => p.FechaUltimaActualizacion ?? p.FechaIncio)
                .FirstOrDefault();

            articulo.PrecioActual = precioActual?.PrecioVentaConIva;
            precioCosto = precioActual?.PrecioCosto ?? 0;
            fechaUActual = precioActual?.FechaUltimaActualizacion;
        }
    }
}
