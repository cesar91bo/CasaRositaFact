@page "/articulos"
@using CasaRositaFact.Components.Pages.Categorias
@using CasaRositaFact.Components.Pages.Proveedores
@using CasaRositaFact.Components.Pages.Rubros
@using Services
@using Models
@inject ArticuloService ArticuloService
@inject NavigationManager NavigationManager
@inject CategoriaService CategoriaService
@inject ProveedorService ProveedorService
@inject RubroService RubroService

<div class="bg-light p-4">
    <h2 class="text-dark fw-bold  mb-2">Lista de Artículos</h2>
</div>

<button type="button" @onclick="CreateNewArticulo" class="btn btn-primary mb-3">Nuevo Artículo</button>

<input type="text" @bind="filtro" @bind:event="oninput" class="form-control mb-3" placeholder="Buscar por nombre" />

<div class="form-check mb-3">
    <input class="form-check-input" type="checkbox" id="chkOtrosFiltros" @bind="usarOtrosFiltros" />
    <label class="form-check-label" for="chkOtrosFiltros">
        Filtrar por otros criterios
    </label>
</div>

@if (usarOtrosFiltros)
{
    <button class="btn btn-secondary mb-2" @onclick="() => ToggleFiltro(false)">Desactivar filtros</button>
    <div class="row mb-2">
        <div class="col-md-6">
            <label class="form-label">Seleccione Categoría</label>
            <CategoriaSelect Categorias="categorias" SelectedId="categoriaSeleccionada" SelectedIdChanged="OnCategoriaChanged" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Seleccione Proveedor</label>
            <ProveedorSelect Proveedores="proveedores" SelectedId="proveedorSeleccionado" SelectedIdChanged="OnProveedorChanged" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Seleccione Rubro</label>
            <RubroSelect Rubros="rubros" SelectedId="rubroSeleccionado" SelectedIdChanged="OnRubroChanged" />
        </div>
    </div>

}


<table class="table">
    <thead class="table-light">
        <tr>
            <th class="w-25">Nombre</th> <!-- 25% de ancho -->
            <th class="w-15 text-center">Categoría</th> <!-- 15% -->
            <th class="w-10 text-center">Stock</th> <!-- 10% -->
            <th class="w-10 text-center">Precio Costo</th> <!-- Alineado a la derecha -->
            <th class="w-10 text-center">Total con IVA</th>
            <th class="w-10">Actualización</th>
            <th class="w-20 text-center">Acciones</th> <!-- 20% y centrado -->
        </tr>
    </thead>
    <tbody>
        @foreach (var articulo in articulosFiltrados)
        {
            <tr>
                <td class="text-truncate" style="max-width: 200px;" title="@articulo.Nombre">
                    @articulo.Nombre
                </td>
                <td class="text-center">@articulo.Categoria?.Nombre</td>
                <td class="text-center">@(articulo.LlevarStock ? articulo.StockActual : "")</td>
                <td class="text-center">
                    @{
                        var precioActual = ObtenerPrecioVigente(articulo);
                    }
                    @(precioActual?.PrecioCosto > 0
                        ? precioActual?.PrecioCosto.ToString("C")
                        : "Sin precio")
                </td>
                <td class="text-center">@(articulo.PrecioActual?.ToString("C") ?? "Sin precio")</td>
                <td>@(fechaUActual?.ToString("dd/MM/yyyy") ?? "Sin fecha")</td>
                <td>
                    <a class="btn btn-secondary" href="@($"/articulos/editar/{articulo.IdArticulo}")"> <i class="bi bi-pencil"></i> Editar</a> |
                    <button class="btn btn-danger" @onclick="() => DeleteArticulo(articulo.IdArticulo)"> <i class="bi bi-trash"></i> Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Articulo> articulos = new List<Articulo>();
    private List<Articulo> articulosFiltrados = new List<Articulo>();
    private DateTime? fechaUActual;
    private bool usarOtrosFiltros = false;

    private string _filtro = "";

    private int? categoriaSeleccionada;
    private int? rubroSeleccionado;
    private int? proveedorSeleccionado;

    // Listas de opciones
    private List<Categoria> categorias = new();
    private List<Rubro> rubros = new();
    private List<Proveedor> proveedores = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categorias = (await CategoriaService.GetAllCategoriasAsync()).ToList();
            proveedores = (await ProveedorService.GetAllProveedoresAsync()).ToList();
            rubros = (await RubroService.GetAllRubrosAsync()).ToList();
            articulos = (await ArticuloService.GetAllAsync()).ToList();
            SetPrecioActual(articulos);
            articulosFiltrados = articulos;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al inicializar el componente: {ex.Message}");
        }
    }

    private void CreateNewArticulo()
    {
        NavigationManager.NavigateTo("/articulos/formArticulo");
    }
    private async Task DeleteArticulo(int id)
    {
        await ArticuloService.DeleteAsync(id);
        articulosFiltrados = (await ArticuloService.GetAllAsync()).ToList();

    }
    private string filtro
    {
        get => _filtro;
        set
        {
            _filtro = value;
            FiltrarArticulos();
        }
    }

    private void FiltrarArticulos()
    {
        var query = articulos.AsQueryable();

        if (!string.IsNullOrWhiteSpace(filtro) && filtro.Length >= 2)
        {
            query = query.Where(a => a.Nombre.Contains(filtro, StringComparison.OrdinalIgnoreCase));
        }

        if (usarOtrosFiltros)
        {
            if (categoriaSeleccionada.HasValue)
            {
                query = query.Where(a => a.IdCategoria == categoriaSeleccionada.Value);
            }

            if (proveedorSeleccionado.HasValue)
            {
                query = query.Where(p => p.IdProveedor == proveedorSeleccionado.Value);
            }

            if (rubroSeleccionado.HasValue)
            {
                query = query.Where(p => p.IdRubro == rubroSeleccionado.Value);
            }
        }

        articulosFiltrados = query.ToList();
    }

    private void OnCategoriaChanged(int? nuevaCategoria)
    {
        categoriaSeleccionada = nuevaCategoria;
        FiltrarArticulos();
    }

    private void OnProveedorChanged(int? nuevoProveedor)
    {
        proveedorSeleccionado = nuevoProveedor;
        FiltrarArticulos();
    }

    private void OnRubroChanged(int? nuevoRubro)
    {
        rubroSeleccionado = nuevoRubro;
        FiltrarArticulos();
    }

    private void ToggleFiltro(bool value)
    {
        usarOtrosFiltros = value;

        if (!usarOtrosFiltros)
        {
            categoriaSeleccionada = null;
            proveedorSeleccionado = null;
            rubroSeleccionado = null;

            FiltrarArticulos();
        }
    }


    private void SetPrecioActual(List<Articulo> listaArticulos)
    {
        foreach (var articulo in listaArticulos)
        {
            if (articulo.PreciosArticulos == null || !articulo.PreciosArticulos.Any())
            {
                articulo.PrecioActual = null;
                continue;
            }

            // Obtener el precio más reciente según la lógica de fechas
            var precioActual = articulo.PreciosArticulos
                .Where(p => p.FechaIncio <= DateTime.Now) // Precios vigentes
                .OrderByDescending(p => p.FechaUltimaActualizacion ?? p.FechaIncio)
                .FirstOrDefault();

            articulo.PrecioActual = precioActual?.PrecioVentaConIva;
            fechaUActual = precioActual?.FechaUltimaActualizacion;
        }
    }

    private PrecioArticulo? ObtenerPrecioVigente(Articulo articulo)
    {
        return articulo.PreciosArticulos?
            .Where(p => p.FechaIncio <= DateTime.Now)
            .OrderByDescending(p => p.FechaUltimaActualizacion ?? p.FechaIncio)
            .FirstOrDefault();
    }

}
