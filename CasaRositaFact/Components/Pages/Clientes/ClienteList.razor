@page "/clientes"
@using Services
@using Models
@inject ClienteService ClienteService
@inject NavigationManager NavigationManager

<div class="bg-light p-4">
<h2 class="text-dark fw-bold mb-2">Lista de Clientes</h2>
</div>

<button type="button" @onclick="CreateNewCliente" class="btn btn-primary mb-3">Nuevo Cliente</button>

<input type="text" @bind="filtro" @bind:event="oninput" class="form-control mb-3" placeholder="Buscar por nombre o apellido" />

<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Teléfono</th>
            <th>Estado</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var cliente in clientesFiltrados)
        {
            <tr>
                <td>@cliente.IdCliente</td>
                <td>@cliente.Nombre</td>
                <td>@cliente.Apellido</td>
                <td>@cliente.Telefono</td>
                <td class="@(cliente.Estado == Cliente.EstadoCliente.Suspendido ? "text-danger fw-bold"
            :       cliente.Estado == Cliente.EstadoCliente.Inactivo ? "text-warning fw-bold" : "")">
                    @cliente.Estado
                </td>
                <td>
                    <a class="btn btn-secondary" href="@($"/clientes/editar/{cliente.IdCliente}")">Editar</a> |
                    <button class="btn btn-danger" @onclick="() => DeleteCliente(cliente.IdCliente)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Cliente> clientes = new List<Cliente>();
    private List<Cliente> clientesFiltrados = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            clientes = (await ClienteService.GetAllClientesAsync()).ToList();
            clientesFiltrados = clientes;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al inicializar el componente: {ex.Message}");
        }
    }

    private string filtro
    {
        get => _filtro;
        set
        {
            _filtro = value;
            FiltrarClientes();
        }
    }
    private string _filtro = "";

    private void FiltrarClientes()
    {
        if (_filtro.Length >= 2)
        {
            clientesFiltrados = clientes
                .Where(c => $"{c.Nombre} {c.Apellido}".Contains(_filtro, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else if (string.IsNullOrWhiteSpace(_filtro))
        {
            clientesFiltrados = clientes.ToList(); // vuelve a cargar toda la grilla
        }
    }


    private void CreateNewCliente()
    {
        NavigationManager.NavigateTo("/clientes/nuevo");
    }

    private async Task DeleteCliente(int id)
    {
        await ClienteService.DeleteClienteAsync(id);
        clientesFiltrados = (await ClienteService.GetAllClientesAsync()).ToList(); // Actualizar la lista
    }
}
