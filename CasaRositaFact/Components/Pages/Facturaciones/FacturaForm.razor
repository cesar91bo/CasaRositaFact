@page "/facturas/formFactura"
@page "/facturas/editar/{FacturaId:int}"
@using CasaRositaFact.Components.Pages.Auxiliares
@using CasaRositaFact.Components.Pages.Facturaciones
@using CasaRositaFact.Components.Pages.Clientes
@using CasaRositaFact.Components.Pages.Articulos
@using CasaRositaFact.Models
@using CasaRositaFact.State
@using Services
@using Data.Entities
@using static CasaRositaFact.Data.Entities.Factura
@using Blazored.LocalStorage
@inject ClienteService ClienteService
@inject FacturaService FacturaService
@inject AuxiliarService AuxiliarService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject FacturaState FacturaState
@inject ILocalStorageService localStorage
@inject ArticuloService ArticuloService

<h3 class="mb-2 text-info fw-bold border-bottom pb-2">@(FacturaId == null ? "Nueva Factura" : "Editar Factura")</h3>

<EditForm Model="factura" OnValidSubmit="GuardarFactura">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h3 class="mb-3 text-secondary fw-bold border-bottom pb-2">Cabecera de Factura</h3>

    <!-- Búsqueda de Cliente -->
    <div class="row mb-3 align-items-end">
        <!-- Input ID Cliente -->
        <div class="col-md-2">
            <label for="IdCliente" class="form-label">ID Cliente</label>
            <InputNumber id="IdCliente" class="form-control" @bind-Value="IdClienteBuscado" />
        </div>

        <!-- Botón Buscar -->
        <div class="col-md-1">
            <label class="form-label d-block">&nbsp;</label>
            <button type="button" class="btn btn-outline-primary w-100" @onclick="BuscarCliente">
                <i class="bi bi-search"></i> <!-- Bootstrap Icons: lupa -->
            </button>
        </div>

        <div class="col-md-1">
            <label class="form-label d-block">&nbsp;</label>
            <button type="button" class="btn btn-outline-secondary w-100" @onclick="MostrarModalClientes">
                <i class="bi bi-people"></i>
            </button>
        </div>
        @if (mostrarModalClientes)
        {
            <ClientesModal OnClienteSeleccionado="AsignarCliente" OnCerrar="OcultarModalClientes" />
        }

        <!-- Botón Cliente por defecto -->
        <div class="col-md-1">
            <label class="form-label d-block">&nbsp;</label>
            <button type="button" class="btn btn-outline-success w-100" @onclick="CargarClientePorDefecto">
                <i class="bi bi-person-check"></i>
            </button>
        </div>

        <!-- Nombre del Cliente -->
        <div class="col-md-5">
            <label class="form-label">Cliente</label>
            <input id="Cliente" class="form-control" value="@cliente.NombreCompleto" readonly />
        </div>
    </div>

    <div class="row mb-3 align-items-end">
        <!-- Tipo y Número Factura -->
        <div class="col-md-3">
            <label for="TipoFactura" class="form-label">Tipo Factura</label>
            <InputSelect id="TipoFactura" class="form-select" @bind-Value="factura.IdLetraFactura">
                @foreach (var letra in letrasFactura)
                {
                    <option value="@letra.IdLetraFactura">@letra.Nombre</option>
                }
            </InputSelect>
        </div>

        <div class="col-md-3">
            <label for="NroFactura" class="form-label">Número</label>
            <InputText disabled id="NroFactura" class="form-control" @bind-Value="factura.NroCompFactura" />
        </div>
        <!-- Fecha -->
        <div class="col-md-3">
            <label for="FechaEmision" class="form-label">Fecha de Emisión</label>
            <InputDate id="FechaEmision" class="form-control" @bind-Value="factura.FechaEmision" />
        </div>

    </div>

    <div class="row mb-3">
        <!-- Forma de Pago -->
        <div class="col-md-4">
            <label for="FormaPago" class="form-label">Forma de Pago</label>
            <InputSelect id="FormaPago" class="form-select" @bind-Value="factura.FormaPago">
                <option value="Contado">Contado</option>
                <option value="Credito">Crédito</option>
                <option value="Transferencia">Transferencia</option>
            </InputSelect>
        </div>

        <!-- Concepto -->
        <div class="col-md-4">
            <label for="FormaPago" class="form-label">Concepto</label>
            <InputSelect id="FormaPago" class="form-select" @bind-Value="factura.ConceptoFactura">
                <option value="Producto">Producto</option>
                <option value="Servicio">Servicio</option>
                <option value="ProductoServicio">Producto/Servicio</option>
            </InputSelect>
        </div>

        <!-- Checkbox "No mover Stock" -->
        <div class="col-md-3 d-flex align-items-center">
            <div class="form-check form-switch mt-3">
                <InputCheckbox id="NoMoverStock"
                               class="form-check-input"
                               @bind-Value="factura.MoverStock" />
                <label class="form-check-label" for="NoMoverStock">No mover Stock</label>
            </div>
        </div>
    </div>

    <div class="row mb-4 border-bottom"></div>

    <!-- Detalle -->
    <FactDetalle Detalles="facturaDetalles"
                 OnEliminarDetalle="EliminarFilaPorId"
                 OnArticuloSeleccionado="AsignarArticulo" />


    <div class="mb-4">
        <label for="Detalle" class="form-label">Detalle Adicional</label>
        <InputTextArea id="Detalle" class="form-control" rows="2" @bind-Value="factura.Observaciones" />
    </div>
</EditForm>


@code {
    [Parameter] public int? FacturaId { get; set; }


    private Factura factura = new Factura
        {
            IdLetraFactura = 1,
            IdTipoDocumentoFiscal = 1,
        };
    private List<FacturaDetalle> facturaDetalles = new();


    private List<TipoDocumentoFiscal> tiposDocumentosFiscales = new List<TipoDocumentoFiscal>();
    private List<LetraFactura> letrasFactura = new List<LetraFactura>();
    private Cliente cliente = new Cliente { Nombre = "Consumidor Final", Apellido = "", IdRegimenImpositivo = 1, IdTipoDocumento = 1 };
    private List<FormaPago> formasPago = new List<FormaPago>();
    private List<ConceptoFactura> conceptosFactura = new List<ConceptoFactura>();
    private List<Articulo> articulos = new List<Articulo>();
    private Articulo articulo = new Articulo
        {
            Nombre = "Producto Desconocido",
            PrecioActual = 0,
            StockActual = 0,
            IdCategoria = 1,
            IdUnidadMedida = 1
        };
    private List<LetraFactura> letraFacturas = new();

    private int? IdClienteBuscado = 1;
    private string clienteNombre = string.Empty;
    private bool mostrarModalClientes = false;
    private void MostrarModalClientes() => mostrarModalClientes = true;
    private void OcultarModalClientes() => mostrarModalClientes = false;

    private string nombreArticulo = string.Empty;
    private string codigoArticulo = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? IdArticulo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        letrasFactura = (await AuxiliarService.GetAllLetraFacturaAsync()).ToList();

        if (FacturaId.HasValue)
        {
            factura = await FacturaService.GetFacturaByIdAsync(FacturaId.Value);
        }
        else
        {
            // Intentar recuperar desde localStorage
            var json = await localStorage.GetItemAsStringAsync("facturaTemp");
            var tempFactura = await localStorage.GetItemAsync<Factura>("facturaTemp");
            if (tempFactura is not null)
            {
                factura = tempFactura;

                if (factura.IdCliente > 0)
                {
                    cliente = await ClienteService.GetClienteByIdAsync(factura.IdCliente);
                    IdClienteBuscado = cliente.IdCliente;
                }

                StateHasChanged();
            }
            else
            {
                // Es una nueva factura
                factura.FechaEmision = DateTime.Today;
                factura.IdLetraFactura = letrasFactura.FirstOrDefault()?.IdLetraFactura ?? 1;
                factura.IdLetraFactura = 2;
                await CargarClientePorDefecto();
            }
        }

        if (IdArticulo.HasValue)
        {
            var articuloSel = await ArticuloService.GetByIdAsync(IdArticulo.Value);
            if (articuloSel != null)
            {
                facturaDetalles.Add(new FacturaDetalle
                    {
                        IdArticulo = articuloSel.IdArticulo,
                        NombreArticulo = articuloSel.Nombre,
                        PrecioUnitario = articuloSel.PrecioActual ?? 0,
                        Cantidad = 1,
                        TotalArticulo = articuloSel.PrecioActual, // Inicial
                        IdUnidadMedida = articuloSel.IdUnidadMedida ?? 1
                    });

                facturaDetalles.Add(new FacturaDetalle());
            }
        }
        else
        {
            facturaDetalles.Add(new FacturaDetalle());
        }


        StateHasChanged();

    }


    private async Task GuardarFactura()
    {
        FacturaState.Limpiar();
        await localStorage.RemoveItemAsync("facturaTemp");

    }

    private void NavigateToFacturas()
    {
        NavigationManager.NavigateTo("/facturas");
    }

    private void NavigateToClientes()
    {
        NavigationManager.NavigateTo("/clientes");
    }

    private async Task BuscarCliente()
    {
        if (IdClienteBuscado is null || IdClienteBuscado == 0)
            await CargarClientePorDefecto();

        try
        {
            var clienteEncontrado = await ClienteService.GetClienteByIdAsync(IdClienteBuscado.Value);
            cliente = clienteEncontrado;
            factura.IdCliente = cliente.IdCliente;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"No se encontró el cliente con ID {IdClienteBuscado}");
        }

        StateHasChanged();
    }


    private async Task CargarClientePorDefecto()
    {
        cliente = await ClienteService.GetClientePorDefecto();
        IdClienteBuscado = 1;
        StateHasChanged();
    }

    private void AsignarCliente(Cliente clienteSel)
    {

        cliente = clienteSel;
        factura.IdCliente = clienteSel.IdCliente;
        IdClienteBuscado = clienteSel.IdCliente;
        FacturaState.FacturaActual = factura;
        StateHasChanged();
    }

    private void AsignarArticulo(ArticuloModel articuloSel)
    {
        if (articuloSel == null)
            return;

        // Evitar duplicados
        var existente = facturaDetalles.FirstOrDefault(d => d.IdArticulo == articuloSel.IdArticulo && d.IdArticulo != 0);
        if (existente != null)
        {
            existente.Cantidad += 1;
            existente.TotalArticulo = Math.Round(existente.Cantidad * existente.PrecioUnitario, 2);
        }
        else
        {
            var nuevoDetalle = new FacturaDetalle
                {
                    IdArticulo = articuloSel.IdArticulo,
                    NombreArticulo = articuloSel.Nombre,
                    PrecioUnitario = articuloSel.PrecioActual,
                    Cantidad = 1,
                    TotalArticulo = articuloSel.PrecioActual,
                    IdUnidadMedida = articuloSel.IdUnidadMedida
                };

            // Buscar la fila vacía (IdArticulo == 0 y sin nombre)
            int indexFilaVacia = facturaDetalles.FindIndex(f => f.IdArticulo == 0 && string.IsNullOrEmpty(f.NombreArticulo));

            if (indexFilaVacia >= 0)
            {
                // Insertar antes de la fila vacía
                facturaDetalles.Insert(indexFilaVacia, nuevoDetalle);
            }
            else
            {
                // Si no hay fila vacía, agregar al final
                facturaDetalles.Add(nuevoDetalle);
            }
        }

        StateHasChanged();
    }


    private void BuscarArticulo()
    {


    }

    private void CalcularTotalYAgregarNuevaFila(Guid uid)
    {
        var item = facturaDetalles.FirstOrDefault(x => x.Uid == uid);

        if (item is null)
            return;

        if (item.Cantidad > 0 && item.PrecioUnitario > 0)
        {
            item.TotalArticulo = Math.Round(item.Cantidad * item.PrecioUnitario, 2);

            // Agrega una nueva fila solo si esta es la última
            if (item == facturaDetalles.Last())
            {
                facturaDetalles.Add(new FacturaDetalle());
            }
        }

        StateHasChanged();
    }


    private async Task EliminarFilaPorId(FacturaDetalle detalle)
    {
        facturaDetalles.Remove(detalle);
        if (facturaDetalles.Count == 0)
        {
            facturaDetalles.Add(new FacturaDetalle());
        }
        StateHasChanged();
    }

}
