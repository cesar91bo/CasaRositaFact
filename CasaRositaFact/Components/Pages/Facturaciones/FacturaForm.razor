@page "/facturas/formFactura"
@page "/facturas/editar/{FacturaId:int}"
@using CasaRositaFact.Components.Pages.Auxiliares
@using CasaRositaFact.Components.Pages.Facturaciones
@using CasaRositaFact.Components.Pages.Clientes
@using CasaRositaFact.Components.Pages.Articulos
@using CasaRositaFact.Models
@using CasaRositaFact.State
@using Services
@using Data.Entities
@using static CasaRositaFact.Data.Entities.Factura
@using Blazored.LocalStorage
@inject ClienteService ClienteService
@inject FacturaService FacturaService
@inject AuxiliarService AuxiliarService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject FacturaState FacturaState
@inject ILocalStorageService localStorage
@inject ArticuloService ArticuloService

<h3 class="mb-2 text-info fw-bold border-bottom pb-2">@(FacturaId == null ? "Nueva Factura" : "Editar Factura")</h3>

<EditForm Model="factura" OnValidSubmit="GuardarFactura">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h3 class="mb-3 text-secondary fw-bold border-bottom pb-2">Cabecera de Factura</h3>

    <FacturaCabecera Factura="factura"
                     Cliente="cliente"
                     IdClienteBuscado="IdClienteBuscado"
                     OnClienteBuscadoChanged="@(id => IdClienteBuscado = id)"
                     OnClienteAsignado="AsignarCliente"
                     OnMostrarModalClientes="MostrarModalClientes"
                     LetrasFactura="letrasFactura" />

    <div class="row mb-4 border-bottom"></div>

    <!-- Detalle -->
    <FactDetalle Detalles="facturaDetalles"
    DetallesFacturaCompleta="facturaDetalles"
    OnArticuloSeleccionado="AsignarArticulo"
    OnEliminarDetalle="EliminarDetalle"
    FacturaActual="factura" />

    <FactFooter Detalles="facturaDetalles"
         OnGuardar="GuardarFactura"
         OnCancelar="NavigateToFacturas" />
</EditForm>

@if (mostrarModalClientes)
{
    <ClientesModal OnClienteSeleccionado="AsignarCliente"
                   OnCerrar="OcultarModalClientes" />
}

@code {
    [Parameter] public int? FacturaId { get; set; }
    [Parameter] public Factura Factura { get; set; }
    [Parameter] public Cliente Cliente { get; set; }
    [Parameter] public EventCallback<Cliente> OnClienteAsignado { get; set; }

    private Factura factura = new Factura
        {
            IdLetraFactura = 1,
            IdTipoDocumentoFiscal = 1,
        };
    private List<FacturaDetalle> facturaDetalles = new();


    private List<TipoDocumentoFiscal> tiposDocumentosFiscales = new List<TipoDocumentoFiscal>();
    private List<LetraFactura> letrasFactura = new List<LetraFactura>();
    private Cliente cliente = new Cliente { Nombre = "Consumidor Final", Apellido = "", IdRegimenImpositivo = 1, IdTipoDocumento = 1 };
    private List<FormaPago> formasPago = new List<FormaPago>();
    private List<ConceptoFactura> conceptosFactura = new List<ConceptoFactura>();
    private List<Articulo> articulos = new List<Articulo>();
    private Articulo articulo = new Articulo
        {
            Nombre = "Producto Desconocido",
            PrecioActual = 0,
            StockActual = 0,
            IdCategoria = 1,
            IdUnidadMedida = 1
        };
    private List<LetraFactura> letraFacturas = new();

    private int? IdClienteBuscado = 1;
    private string clienteNombre = string.Empty;
    private bool mostrarModalClientes;
    private void MostrarModalClientes() => mostrarModalClientes = true;
    private void OcultarModalClientes() => mostrarModalClientes = false;

    private string nombreArticulo = string.Empty;
    private string codigoArticulo = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? IdArticulo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        letrasFactura = (await AuxiliarService.GetAllLetraFacturaAsync()).ToList();

        if (IdArticulo.HasValue)
        {
            var articuloSel = await ArticuloService.GetByIdAsync(IdArticulo.Value);
            if (articuloSel != null)
            {
                // Buscar fila vacía existente
                var filaVacia = facturaDetalles.FirstOrDefault(f => f.IdArticulo == 0 && string.IsNullOrWhiteSpace(f.NombreArticulo));

                if (filaVacia != null)
                {
                    // Rellenar la fila vacía
                    filaVacia.IdArticulo = articuloSel.IdArticulo;
                    filaVacia.NombreArticulo = articuloSel.Nombre;
                    filaVacia.PrecioUnitario = articuloSel.PrecioActual ?? 0;
                    filaVacia.Cantidad = 1;
                    filaVacia.TotalArticulo = articuloSel.PrecioActual;
                    filaVacia.IdUnidadMedida = articuloSel.IdUnidadMedida ?? 1;
                }
                else
                {
                    // Si no hay fila vacía, agregar una nueva
                    facturaDetalles.Add(new FacturaDetalle
                        {
                            IdArticulo = articuloSel.IdArticulo,
                            NombreArticulo = articuloSel.Nombre,
                            PrecioUnitario = articuloSel.PrecioActual ?? 0,
                            Cantidad = 1,
                            TotalArticulo = articuloSel.PrecioActual,
                            IdUnidadMedida = articuloSel.IdUnidadMedida ?? 1
                        });
                }

                // Asegurarse de que haya una fila vacía al final
                var ultimaFila = facturaDetalles.LastOrDefault();
                if (ultimaFila == null || ultimaFila.IdArticulo != 0 || !string.IsNullOrWhiteSpace(ultimaFila.NombreArticulo))
                {
                    facturaDetalles.Add(new FacturaDetalle());
                }
            }
        }

        else
        {
            // Eliminar filas vacías que NO estén al final
            for (int i = facturaDetalles.Count - 2; i >= 0; i--)
            {
                var detalle = facturaDetalles[i];
                if (detalle.IdArticulo == 0 && string.IsNullOrWhiteSpace(detalle.NombreArticulo))
                {
                    facturaDetalles.RemoveAt(i);
                }
            }

            // Verificar si la última fila es vacía
            var ultimaFila = facturaDetalles.LastOrDefault();
            if (ultimaFila == null || ultimaFila.IdArticulo != 0 || !string.IsNullOrWhiteSpace(ultimaFila.NombreArticulo))
            {
                facturaDetalles.Add(new FacturaDetalle());
            }
        }


        StateHasChanged();

    }

    private bool localStorageCargado = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !localStorageCargado && !FacturaId.HasValue)
        {
            try
            {
                var temp = await localStorage.GetItemAsync<FacturaTempModel>("facturaTemp");

                if (temp?.Factura != null)
                {
                    factura = temp.Factura;
                    facturaDetalles = temp.Detalles ?? new List<FacturaDetalle>();

                    if (factura.IdCliente > 0)
                    {
                        try
                        {
                            cliente = await ClienteService.GetClienteByIdAsync(factura.IdCliente);
                            IdClienteBuscado = cliente.IdCliente;
                        }
                        catch
                        {
                            cliente = new Cliente { Nombre = "Consumidor Final", Apellido = "", IdRegimenImpositivo = 1, IdTipoDocumento = 1 };
                            IdClienteBuscado = 1;
                        }
                    }
                }
                else
                {
                    factura = new Factura
                        {
                            FechaEmision = DateTime.Today,
                            IdLetraFactura = letrasFactura.FirstOrDefault()?.IdLetraFactura ?? 1,
                            IdTipoDocumentoFiscal = 1,
                            MoverStock = true
                        };

                    facturaDetalles = new List<FacturaDetalle> { new FacturaDetalle() };

                    await CargarClientePorDefecto();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al deserializar facturaTemp: {ex.Message}");
                await localStorage.RemoveItemAsync("facturaTemp");
            }

            localStorageCargado = true;
            StateHasChanged(); // solo si hiciste cambios visibles
        }
    }


    private async Task BuscarCliente()
    {
        if (IdClienteBuscado is null || IdClienteBuscado == 0)
            return;

        try
        {
            var clienteEncontrado = await ClienteService.GetClienteByIdAsync(IdClienteBuscado.Value);
            await OnClienteAsignado.InvokeAsync(clienteEncontrado);
        }
        catch
        {
            await JS.InvokeVoidAsync("alert", $"No se encontró el cliente con ID {IdClienteBuscado}");
        }
    }

    private async Task CargarClientePorDefecto()
    {
        Cliente = await ClienteService.GetClientePorDefecto();
        Factura.IdCliente = Cliente.IdCliente;
        IdClienteBuscado = Cliente.IdCliente;
        await OnClienteAsignado.InvokeAsync(Cliente);
    }

    private void AsignarCliente(Cliente clienteSel)
    {

        cliente = clienteSel;
        factura.IdCliente = clienteSel.IdCliente;
        IdClienteBuscado = clienteSel.IdCliente;
        FacturaState.FacturaActual = factura;

        localStorage.SetItemAsync("facturaTemp", new FacturaTempModel
            {
                Factura = factura,
                Detalles = facturaDetalles
            });
        StateHasChanged();
    }

    private async Task GuardarFactura()
    {
        FacturaState.Limpiar();
        await localStorage.RemoveItemAsync("facturaTemp");

    }

    private void NavigateToFacturas()
    {
        NavigationManager.NavigateTo("/facturas");
    }

    private void NavigateToClientes()
    {
        NavigationManager.NavigateTo("/clientes");
    }

   

    private void AsignarArticulo(ArticuloModel articuloSel)
    {
        if (articuloSel == null)
            return;

        var existente = facturaDetalles.FirstOrDefault(d => d.IdArticulo == articuloSel.IdArticulo && d.IdArticulo != 0);
        if (existente != null)
        {
            existente.Cantidad += 1;
            existente.TotalArticulo = Math.Round(existente.Cantidad * existente.PrecioUnitario, 2);
        }
        else
        {
            var nuevoDetalle = new FacturaDetalle
                {
                    IdArticulo = articuloSel.IdArticulo,
                    NombreArticulo = articuloSel.Nombre,
                    PrecioUnitario = articuloSel.PrecioActual,
                    Cantidad = 1,
                    TotalArticulo = articuloSel.PrecioActual,
                    IdUnidadMedida = articuloSel.IdUnidadMedida
                };

            // Eliminar fila vacía si existe
            var vacía = facturaDetalles.FirstOrDefault(f => f.IdArticulo == 0 && string.IsNullOrWhiteSpace(f.NombreArticulo));
            if (vacía != null)
            {
                facturaDetalles.Remove(vacía);
            }

            facturaDetalles.Add(nuevoDetalle);
            facturaDetalles.Add(new FacturaDetalle()); // Siempre una vacía al final

             localStorage.SetItemAsync("facturaTemp", new FacturaTempModel
                {
                    Factura = factura,
                    Detalles = facturaDetalles
                });
        }

        StateHasChanged();
    }

    private void BuscarArticulo()
    {


    }

    private async Task EliminarDetalle(FacturaDetalle detalle)
    {
        // Si es la última fila y está vacía, no la elimines
        if (facturaDetalles.Count > 0 &&
            facturaDetalles.IndexOf(detalle) == facturaDetalles.Count - 1 &&
            EsDetalleVacio(detalle))
        {
            return;
        }

        facturaDetalles.Remove(detalle);

        // Si quedó vacío el listado, agregamos uno vacío
        if (facturaDetalles.Count == 0)
        {
            facturaDetalles.Add(new FacturaDetalle());
        }

        // Guardar correctamente en localStorage
        await localStorage.SetItemAsync("facturaTemp", new FacturaTempModel
            {
                Factura = factura,
                Detalles = facturaDetalles
            });

        StateHasChanged();
    }


    private bool EsDetalleVacio(FacturaDetalle detalle)
    {
        return string.IsNullOrWhiteSpace(detalle.NombreArticulo)
            && detalle.Cantidad == 0
            && detalle.PrecioUnitario == 0;
    }

}
