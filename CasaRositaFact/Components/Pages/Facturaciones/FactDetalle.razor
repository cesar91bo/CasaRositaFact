@using CasaRositaFact.Components.Pages.Articulos
@using CasaRositaFact.Models
@using CasaRositaFact.State
@using Data.Entities
@using static CasaRositaFact.Data.Entities.Factura
@using Blazored.LocalStorage

@inject ILocalStorageService localStorage

<h3 class="mb-3 text-secondary fw-bold border-bottom pb-2">Detalle de Factura</h3>

<table class="table table-bordered table-striped table-dark align-middle">
    <thead class="thead-dark">
        <tr>
            <th style="width: 80px;">Borrar</th>
            <th style="width: 80px;">Buscar</th>
            <th style="width: 180px;">Art. Desconocido</th>
            <th style="width: 100px;">Nro Art.</th>
            <th>Nombre</th>
            <th style="width: 100px;">Cantidad</th>
            <th style="width: 80px;">%IVA</th>
            <th style="width: 120px;">Precio</th>
            <th style="width: 120px;">Total</th>
            <th style="width: 160px;">Precio Manual</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < Detalles.Count; i++)
        {
            var item = Detalles[i];
            <tr @key="item.Uid">
                <td>
                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => EliminarFilaPorId(item)">
                        <i class="bi bi-trash"></i>
                    </button>
                </td>
                <td>
                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="MostrarModal">
                        <i class="bi bi-search"></i>
                    </button>
                </td>
                <td>
                    <button type="button" class="btn btn-sm btn-secondary w-100" @onclick="AbrirModalArticuloDesconocido">Cargar</button>
                </td>
                <td>@item.IdArticulo</td>
                <td>@item.NombreArticulo</td>
                <td>
                    <input id="cantidad_@item.Uid"
                    type="number"
                    class="form-control form-control-sm text-end"
                    min="1"
                    @bind="item.Cantidad"
                    @oninput="(e => OnCantidadChanged(e, item))" />
                </td>
                <td>
                    <select class="form-select form-select-sm" @bind="item.IdTipoIva">
                        <option value="1">21%</option>
                        <option value="2">10.5%</option>
                        <option value="3">0%</option>
                    </select>
                </td>
                <td>@item.PrecioUnitario</td>
                <td>@item.TotalArticulo</td>
                <td>
                    <button type="button" class="btn btn-sm btn-secondary w-100">Cargar Precio</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (MostrarModalArticulos)
{
    <ArticuloModal FacturaActual="FacturaActual"
    DetallesFactura="DetallesFacturaCompleta"
    OnArticuloSeleccionado="AsignarArticulo"
    OnCerrar="OcultarModal" />
}

@if (MostrarModalArticuloDesconocido)
{
    <ArticuloDesconocidoModal OnConfirmar="ConfirmarArticuloDesconocido"
                              OnCerrar="CerrarModalArticuloDesconocido" />
}



@code {
    [Parameter] public int? FacturaId { get; set; }
    [Parameter]
    public List<FacturaDetalle> DetallesFacturaCompleta { get; set; } = default!;

    private Factura factura = new()
    {
        IdLetraFactura = 1,
        IdTipoDocumentoFiscal = 1,
    };

    [Parameter]
    public List<FacturaDetalle> Detalles { get; set; } = new();

    [Parameter]
    public EventCallback<FacturaDetalle> OnEliminarDetalle { get; set; }

    [Parameter]
    public EventCallback<ArticuloModel> OnArticuloSeleccionado { get; set; }

    [Parameter]
    public Factura? FacturaActual { get; set; }

    private bool MostrarModalArticulos { get; set; } = false;

    private void MostrarModal()
    {
        MostrarModalArticulos = true;
        StateHasChanged(); // por si no actualiza
    }

    private void OcultarModal()
    {
        MostrarModalArticulos = false;
        StateHasChanged();
    }

    private async Task EliminarFila(FacturaDetalle detalle)
    {
        await OnEliminarDetalle.InvokeAsync(detalle);
    }

    private async Task AsignarArticulo(ArticuloModel articulo)
    {
        await OnArticuloSeleccionado.InvokeAsync(articulo);
        await GuardarEnStorage();
        OcultarModal();
    }

    private async void OnCantidadChanged(ChangeEventArgs e, FacturaDetalle item)
    {
        if (int.TryParse(e.Value?.ToString(), out int nuevaCantidad))
        {
            item.Cantidad = nuevaCantidad;

            if (item.Cantidad > 0 && item.PrecioUnitario > 0)
            {
                item.TotalArticulo = Math.Round(item.Cantidad * item.PrecioUnitario, 2);

                if (item == Detalles.Last())
                {
                    Detalles.Add(new FacturaDetalle());
                }
            }

            await GuardarEnStorage();
            StateHasChanged();
        }
    }

    private async Task GuardarEnStorage()
    {
        var tempModel = new FacturaTempModel
            {
                Factura = FacturaActual ?? new Factura(){IdLetraFactura = 2, IdTipoDocumentoFiscal = 1},
                Detalles = DetallesFacturaCompleta
            };

        await localStorage.SetItemAsync("facturaTemp", tempModel);
    }


    private async Task EliminarFilaPorId(FacturaDetalle detalle)
    {
        if (OnEliminarDetalle.HasDelegate)
        {
            await OnEliminarDetalle.InvokeAsync(detalle);
            await GuardarEnStorage();
        }
    }

    private bool MostrarModalArticuloDesconocido { get; set; } = false;

    private void AbrirModalArticuloDesconocido()
    {
        MostrarModalArticuloDesconocido = true;
    }

    private void CerrarModalArticuloDesconocido()
    {
        MostrarModalArticuloDesconocido = false;
    }

    private async Task ConfirmarArticuloDesconocido(FacturaDetalle detalle)
    {
        // Buscar si hay una fila vacía (sin Id ni nombre)
        var filaVacia = Detalles.FirstOrDefault(f =>
            f.IdArticulo == 0 &&
            string.IsNullOrWhiteSpace(f.NombreArticulo)
        );

        if (filaVacia != null)
        {
            // Reemplazamos la fila vacía
            filaVacia.IdArticulo = 0; // 0 para artículos desconocidos
            filaVacia.NombreArticulo = detalle.NombreArticulo;
            filaVacia.PrecioUnitario = detalle.PrecioUnitario;
            filaVacia.Cantidad = detalle.Cantidad;
            filaVacia.IdTipoIva = detalle.IdTipoIva;
            filaVacia.TotalArticulo = Math.Round(detalle.Cantidad * detalle.PrecioUnitario, 2);
        }
        else
        {
            // No hay fila vacía → agregamos el artículo
            detalle.IdArticulo = 0; // Artículo desconocido
            detalle.TotalArticulo = Math.Round(detalle.Cantidad * detalle.PrecioUnitario, 2);
            Detalles.Add(detalle);
        }

        // Aseguramos que haya siempre una fila vacía al final
        var ultima = Detalles.LastOrDefault();
        if (ultima == null || ultima.IdArticulo != 0 || !string.IsNullOrWhiteSpace(ultima.NombreArticulo))
        {
            Detalles.Add(new FacturaDetalle());
        }

        await GuardarEnStorage();
        CerrarModalArticuloDesconocido();
        StateHasChanged();
    }


}
